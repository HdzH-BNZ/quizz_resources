				A TESTER

- geoserver avec une couche having plusieurs colonnes geometry

- PG avec plus colonnes geom sur une mm table

- QGIS Modeler (le FME de QGIS MS ya pas de FME Server-like là)

- gérer la transparence d'un .SLD ds Geoserver

- archiver une DB

- le chiffrement RSA keys

centroid each side of a polygon
buffer circulaire around the centroid
st_angle = 90° entre l'extremite d'1 side, le centroid et un point
         du cercle
prolonger la demie droite centroid - point du cercle choisi
trouver le point intersectant la demie droit et le side en face
relier ces 2 points as axe symetrie et cut le polygon en 2
select le polygon avc la plus grande surface et le superposer 
symetriquement au polygon à la moins grande surface


--DROP VIEW IF EXISTS v_final_symm_3;
--CREATE OR REPLACE VIEW v_final_symm_3 AS
WITH big_half AS (
--pr ne filtrer que la moitié à la superficie la plus grande du polygone
WITH poly_cut AS (
--pr tracer la médiatrice du segment le plus long du polygone
--DROP VIEW IF EXISTS v_mediatrice_poly_6_tools;
--CREATE OR REPLACE VIEW v_mediatrice_poly_6_tools AS
WITH mediatrices_origins AS (
--pr déconstruire le polygone
WITH segments AS (
    SELECT id, 
		ST_AsText(	
			ST_MakeLine(
				lag(	
					(pt).geom, 1, NULL
				) 
				OVER (
					PARTITION BY id ORDER BY id, 
					(pt).path
				), 
				(pt).geom)
			) AS geom
    FROM (
			SELECT b.id, ST_DumpPoints(b.geom) AS pt 
			FROM (
					SELECT id, ST_ExteriorRing(the_geom) as geom
					FROM buildings_bis
					WHERE id = 3
				) as b
		) as dumps
    )

SELECT *,
		--ST_OffsetCurve(ST_GeomFromText(geom), 3, 'quad_segs=4 join=round') as cote_wanted,
		ST_MakeLine(
			--ST_Centroid(geom),
			ST_Point(ST_X(ST_Centroid(geom)),ST_Y(ST_Centroid(geom))),
			ST_Centroid(ST_OffsetCurve(ST_GeomFromText(geom), 100))
			) as new_mediatrice,
		ST_Length(
			ST_GeomFromText(geom)
		) as longueur
		--ST_Union(ST_OffsetCurve(ST_GeomFromText(geom), 2, 'quad_segs=4 join=round'),ST_OffsetCurve(ST_GeomFromText(geom), -2, 'quad_segs=4 join=round'))
FROM segments 
WHERE geom IS NOT NULL
ORDER BY longueur DESC
LIMIT 1
)
	
SELECT b.data, 
	ST_Split(b.the_geom,m.new_mediatrice) as splitted_poly,
	--ST_Intersection(b.the_geom, m.new_mediatrice) as ma_mediatrice,
	--ST_Intersects(b.the_geom, m.new_mediatrice),
	ST_Intersection(b.the_geom, h.the_real_mediatrice) as ma_mediatrice,
	ST_Intersects(b.the_geom, h.the_real_mediatrice),
	ST_Crosses(b.the_geom, h.the_real_mediatrice) as crosses, 
	b.the_geom,
	m.new_mediatrice,
	h.the_real_mediatrice
FROM mediatrices_origins as m, buildings_bis as b,
	(
				SELECT ST_MakeLine(
				ST_MakePoint(
					ST_X(ST_EndPoint(m.new_mediatrice)),
					ST_Y(ST_EndPoint(m.new_mediatrice))
				),
				ST_MakePoint(w.new_x_endpoint, w.new_y_endpoint)
				) as the_real_mediatrice
			FROM (
			SELECT 
				CASE 
					WHEN v.x_endpoint < v.x_symmetry_center THEN ABS(v.x_symmetry_center + (v.x_symmetry_center - v.x_endpoint))
					WHEN v.x_endpoint > v.x_symmetry_center THEN ABS(v.x_symmetry_center - (v.x_endpoint - v.x_symmetry_center))
					WHEN v.x_endpoint = v.x_symmetry_center THEN v.x_endpoint
				END new_x_endpoint,
				CASE
					WHEN v.y_endpoint < v.y_symmetry_center THEN ABS(v.y_symmetry_center + (v.y_symmetry_center - v.y_endpoint))
					WHEN v.y_endpoint > v.y_symmetry_center THEN ABS(v.y_symmetry_center - (v.y_endpoint - v.y_symmetry_center))
					WHEN v.y_endpoint = v.y_symmetry_center THEN v.y_endpoint
				END new_y_endpoint
			FROM (
				SELECT ST_X(ST_EndPoint(m.new_mediatrice)) as x_endpoint,
						ST_Y(ST_EndPoint(m.new_mediatrice)) as y_endpoint,
						ST_X(ST_Centroid(m.geom)) as x_symmetry_center,
						ST_Y(ST_Centroid(m.geom)) as y_symmetry_center
				FROM mediatrices_origins as m
			) as v
			) as w, mediatrices_origins as m
	) as h
WHERE --ST_Crosses(b.the_geom, m.new_mediatrice) = True AND 
	b.id = 3
)

SELECT row_number() over(), s.division, ST_Area(s.division) as surface, s.ma_mediatrice,
		s.symmetry_center, 
		ST_X(s.symmetry_center) as x_centre, ST_Y(s.symmetry_center) as y_centre
FROM (
		SELECT ST_Subdivide(splitted_poly) as division, ma_mediatrice,
				ST_Centroid(ma_mediatrice) as symmetry_center
		FROM poly_cut
	) as s
ORDER BY surface DESC
LIMIT 1
)

SELECT row_number() over() as id,
	ST_Union(
		ST_SetSrid(x.lost_poly, 2154), 
		ST_SetSrid(b.division, 2154)
	)
FROM (
SELECT row_number() over() as id, ST_SetSrid(ST_MakePolygon(ST_Makeline(
			ST_SetSrid(ST_Makepoint(z.new_x, z.new_y), 2154)
		)), 2154) as lost_poly
FROM (
SELECT v.*,
	CASE 
		WHEN v.coord_x < b.x_centre THEN ABS(b.x_centre + (b.x_centre - v.coord_x))
		WHEN v.coord_x > b.x_centre THEN ABS(b.x_centre - (v.coord_x - b.x_centre))
		WHEN v.coord_x = b.x_centre THEN v.coord_x
	END new_x,
	CASE
		WHEN v.coord_y < b.y_centre THEN ABS(b.y_centre + (b.y_centre - v.coord_y))
		WHEN v.coord_y > b.y_centre THEN ABS(b.y_centre - (v.coord_y - b.y_centre))
		WHEN v.coord_y = b.y_centre THEN v.coord_y
	END new_y
FROM (
	SELECT ST_AsText(u.geom), ST_X(u.geom) as coord_x, ST_Y(u.geom) as coord_y
	FROM (
		SELECT (ST_DumpPoints(division)).*, x_centre, y_centre
		FROM big_half
	) as u
) as v, big_half as b
) as z
) as x, big_half as b
--SELECT (ST_DumpPoints(t.division)).* FROM

/*
-- exemple de st_split en créant des données de rien
--DROP VIEW v_test_split;
CREATE OR REPLACE VIEW v_test_half2 AS
	-- en revanche si on isole le résultat du ST_SPLIT pour ne garder qu'une seule partie du
	-- split avec ST_SUBDIVIDE, alors ça fonctionne !
WITH poly_cut AS (
SELECT row_number() over() as id, 
		--le résultat d'un ST_SPLIT semble trop compliqué à générer comme geometry ds QGIS
		--puisque ds Qgis le champ mediatrice affiche une GEOMETRYCOLLECTION
	    --MS sur le viewer de PostGIS c'est bon
		ST_Split(ST_SetSrid(cercle, 2154),ST_SetSrid(ligne,2154)) as mediatrice,
		ST_Srid(cercle)as srid_cercle, 
		ST_Srid(ligne) as srid_line,
		--les 2 suivants s'affichent très bien sur QGIS
		ligne as ligne,
		cercle as cercle
FROM (
	SELECT ST_MakeLine(
				ST_MakePoint(10, 10),
				ST_MakePoint(190, 190)
			) As ligne,
   			ST_Buffer(ST_GeomFromText('POINT(100 90)'), 50) As cercle
) As foo
)	
	
SELECT row_number() over(), s.division, ST_Area(s.division) as surface, 
	ST_Srid(s.division) as srid
FROM (
		SELECT ST_Subdivide(mediatrice) as division
		FROM poly_cut
	) as s
ORDER BY surface DESC
LIMIT 1;
*/

CREATE OR REPLACE VIEW v_all_diagonals AS
select id, ST_BoundingDiagonal(the_geom) as geom
from buildings_bis

select id, ST_PointN(ST_ExteriorRing(the_geom), 3)
from buildings_bis

-- création de l'enveloppe = rectangle circonscrit au polygone
DROP VIEW v_envelope;
CREATE OR REPLACE VIEW v_envelope AS
select id, ST_Envelope(the_geom)
from buildings_bis;

SELECT row_number() over()::int as id, ST_Union(o.the_geom, n.geom) as geom
FROM buildings_bis as o, (
select row_number() over()::int as id, ST_NPoints(m.geom) as surface, geom
FROM (
		select row_number() over()::int as id, 
				ST_Subdivide(ST_Difference(ST_Envelope(the_geom), the_geom)) as geom
		from buildings_bis
		where id = 5) as m
ORDER BY surface DESC
LIMIT 1) as n
where o.id = 5;